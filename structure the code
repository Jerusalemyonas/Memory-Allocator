#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdbool.h>

// Minimum block size (including header) to maintain alignment
#define MIN_BLOCK_SIZE 24
// Magic number to detect memory corruption
#define MAGIC_NUMBER 0x12345678

// Block header structure
typedef struct block_header {
    size_t size;              // Size of the block (including header)
    bool is_free;            // Whether the block is free
    unsigned int magic;      // Magic number for corruption detection
    struct block_header* next; // Next block in the list
} block_header_t;

// Global variables
static block_header_t* heap_start = NULL;

// Function declarations
static block_header_t* find_free_block(size_t size);
static block_header_t* extend_heap(size_t size);
static void split_block(block_header_t* block, size_t size);
static void coalesce_blocks(void);

// Initialize our memory allocator
void init_allocator() {
    heap_start = NULL;
}

// Our custom malloc implementation
void* my_malloc(size_t size) {
    if (size == 0) return NULL;

    // Adjust size to include header and alignment
    size_t total_size = size + sizeof(block_header_t);
    total_size = (total_size + 7) & ~7; // 8-byte alignment

    if (total_size < MIN_BLOCK_SIZE)
        total_size = MIN_BLOCK_SIZE;

    // Try to find a free block
    block_header_t* block = find_free_block(total_size);
    
    if (!block) {
        // No free block found, extend heap
        block = extend_heap(total_size);
        if (!block) return NULL;
    }

    // Split block if it's too large
    split_block(block, total_size);
    
    block->is_free = false;
    block->magic = MAGIC_NUMBER;

    // Return pointer to usable memory (after header)
    return (void*)(block + 1);
}
